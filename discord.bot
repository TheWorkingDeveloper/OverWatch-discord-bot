import re
import requests
import discord
import os.path


TOKEN = ''
client = discord.Client()

ROLES = {}
ROLES['GrandMaster'] = '406939082933927936'
ROLES['Master'] = '406935384724078592'
ROLES['Diamond'] = '406934951193848832'
ROLES['Platinum'] = '406934877645176862'
ROLES['Gold'] = '406934841368510464'
ROLES['Silver'] = '406934692332306462'
ROLES['Bronze'] = '406934619036844033'

databaseFile = 'overwatchgamers.db'


def keyExists(dict, key):
    """
    Verify the existence of a key in a dictionary

    :param dict: Dictionary to look up in
    :param key (str): Key of dict to look up
    :returns: Bool
    """
    if key in dict.keys():
        return True
    return False


def getRole(roleName, server):
    """
    Get role object from discord

    :param roleName: Name of role to get object of
    :param server: Discord server object
    :returns: role: Return role object or none if no role exists.
    """
    for role in server.roles:
        if role.name == roleName:
            return role
    return None


def getUserInfoFromAPI(OWTag):
    """
    Return the user profile from the overwatch server
    :param OWTag: The overwatch player tag
    :return: a dict of overwatch user related info
    """
    return requests.get("https://ow-api.com/v1/stats/PC/Europe/" + OWTag + "/profile").json()


def getSR(authorId):
    """
    Get season high and season low from file

    :param authorId: Author id of user to update
    :returns: (Season Low, Season High) (tuple)
    """
    with open(authorId) as db:
        for user in db:
            SR = user.split("||")
            return (SR[0], SR[1].replace('\n', ''))


def isRegistered(authorId):
    """
    Check if a user is already registered

    :param authorId: Author id of user to check
    :returns: Bool: True or False if upgraded
    """
    with open('overwatchgamers.db') as db:
        for user in db:
            if user.startswith(authorId):
                return True
    return False


async def upgradeUser(client, message, userInfo):
    """
    Update the rank of a user

    :param client: Discord client object
    :param message: Discord Message object
    :param userInfo: Dict from overwatch API
    :returns: Bool: True or False if upgraded
    """
    assigned = False
    for role in message.author.roles:
        for rankName, roleId in ROLES.items():
            if keyExists(userInfo, 'ratingName'):
                if role.id == ROLES[userInfo['ratingName']]:
                    assigned = True
                if (role.id == roleId and role.id != ROLES[userInfo['ratingName']]):
                    await client.remove_roles(message.author, role)
            else:
                assigned = True
    if not assigned:
        await client.add_roles(message.author, getRole(userInfo['ratingName'], message.server))
        print(message.author.nick + " was upgraded to " + userInfo['ratingName'])
        msg = 'Your rank has been updated to ' + userInfo['ratingName']
        await client.send_message(message.channel, msg)
        return True
    return False


def updateSR(authorId, userInfo):
    """
    Update the SR of the given author

    :param authorId: Author id of user to update
    :param userInfo: Dict from overwatch API
    :returns: -1: New season Low
    :returns: 0: No changes
    :returns: 1: New season High
    """
    updated = 0
    # create if not exist
    if not os.path.isfile(authorId):
        db = open(authorId, 'w+')
        db.write('0||0')
        db.close()

    with open(authorId) as db:
        for user in db:
            SR = user.split('||')
    if not keyExists(userInfo, 'rating'):
        return 0

    if SR[0] > userInfo['rating'] or SR[0] == '0':
        SR[0] = userInfo['rating']
        updated = -1
    if SR[1] < userInfo['rating']:
        SR[1] = userInfo['rating']
        updated = 1
    db = open(authorId, 'w+')
    db.write(SR[0] + "||" + SR[1].replace('\n', ''))
    db.close()
    return updated


@client.event
async def onMessage(message):
    # we do not want the bot to reply to itself
    if message.author == client.user:
        return

    # Registration command
    if message.content.startswith('!register'):
        if isRegistered(message.author.id):
            msg = 'You are already registered'
            await client.send_message(message.channel, msg)
            return

        battleTag = message.content.replace('!register ', '')
        if re.match("^([A-Za-z0-9]+?)#([0-9]+)$", battleTag):
            msg = 'Please enter your Battle Tag'
            await client.send_message(message.channel, msg)
            return
        msg = 'Welcome to the server {0.author.mention}! Thanks for registering'.format(message)
        await client.send_message(message.channel, msg)
        msg = 'You are now known as ' + str(battleTag) + '.'
        await client.send_message(message.channel, msg)

        # Change nickname
        nickname = re.sub('([a-zA-Z])', lambda x: x.groups()[0].upper(), battleTag, 1)
        await client.change_nickname(message.author, nickname)

        # Create database entry
        db = open(databaseFile, "a")
        db.write(message.author.id + "||" + battleTag)
        db.close()

        # Create user file
        db = open(message.author.id, 'w+')
        db.write("0||0")
        db.close()

        # Update user ranking
        OWTag = message.author.nick.replace('#', '-')
        userInfo = getUserInfoFromAPI(OWTag)
        await upgradeUser(client, message, userInfo)
        # Update highest & lowest SR
        if updateSR(message.author.id, userInfo) == 1:
            msg = 'New Highest!'
            await client.send_message(message.channel, msg)

    # What is my SR?
    if message.content.startswith('!info'):
        if not isRegistered(message.author.id):
            msg = 'You can\'t execute this command if you\'re not registered'
            await client.send_message(message.channel, msg)
            return
        OWTag = message.author.nick.replace('#', '-')
        userInfo = getUserInfoFromAPI(OWTag)

        if keyExists(userInfo, 'rating'):
            msg = 'Your SR is: ' + userInfo['rating'] + '\n' \
            'you are a filthy ' + userInfo['ratingName']
            await client.send_message(message.channel, msg)
            await upgradeUser(client, message, userInfo)
        else:
            msg = 'You are not ranked yet'
            await client.send_message(message.channel, msg)

        if updateSR(message.author.id, userInfo) == 1:
            msg = '*New Highest!*'
            await client.send_message(message.channel, msg)

    if message.content.startswith('!whoami'):
        msg = 'You are {0.author.id} also known as {0.author.name}.'.format(message)
        await client.send_message(message.channel, msg)

    # Display competitive stats
    if message.content.startswith('!stats'):
        if not isRegistered(message.author.id):
            msg = 'You can\'t execute this command if you\'re not registered'
            await client.send_message(message.channel, msg)
            return
        OWTag = message.author.nick.replace('#', '-')
        userInfo = getUserInfoFromAPI(OWTag)
        if not keyExists(userInfo, 'competitiveStats'):
            msg = 'You have not played competitive yet.'
            await client.send_message(message.channel, msg)
            return
        winRate = round(userInfo['competitiveStats']['games']['won']/userInfo['competitiveStats']['games']['played']*100, 2)

        if updateSR(message.author.id, userInfo) == 1:
            msg = '*New Highest!*'
            await client.send_message(message.channel, msg)
        SR = getSR(message.author.id)
        msg = '**Your Ranked stats:**\n' \
              'Games Played: ' + str(userInfo['competitiveStats']['games']['played']) + '\n' \
              'Games Won: ' + str(userInfo['competitiveStats']['games']['won']) + '\n' \
              'Winrate: ' + str(winRate) + '%\n' \
              'Current SR: ' + str(userInfo['rating']) + 'SR\n' \
              'Your season low: ' + SR[0] + 'SR\n' \
              'Your season high: ' + SR[1] + 'SR\n'
        await client.send_message(message.channel, msg)

    # Display leaderboard
    if message.content.startswith('!leaderboard'):
        leaderboard = {}
        with open(databaseFile) as db:
            for user in db:
                user = user.split('||')
                battleTag = user[1].replace('\n', '')
                OWTag = battleTag
                userInfo = getUserInfoFromAPI(OWTag.replace('#', '-'))
                leaderboard[OWTag] = userInfo.get('rating', '0')
                updateSR(user[0], userInfo)

        i = 1
        msg = '**Leaderboard:**\n'
        sortedLB = sorted(leaderboard.items(), key=lambda x: x[1], reverse=True)
        for j, (battleTag, SR) in enumerate(sortedLB):
            if not SR:
                SR = '0'
            msg += str(i) + '. ' + str(battleTag) + ' - ' + str(SR) + 'SR\n'
            i += 1
        await client.send_message(message.channel, msg)


    #Unregister player
    if message.content.startswith('!unregister'):
        if not isRegistered(message.author.id):
            msg = 'You can\'t execute this command if you\'re not registered'
            await client.send_message(message.channel, msg)
            return

        # Create a new list of users
        with open(databaseFile) as db:
            newUserList = []
            for userString in db:
                user = userString.split("||")
                if message.author.id not in user[0]:
                    newUserList.append(userString)

        # Write new list to the 'database'
        with open(databaseFile, 'w') as newDb:
            for user in newUserList:
                newDb.write(user)

        # Remove the user file
        try:
            os.remove(message.author.id)
        except OSError:
            pass

        msg = 'You are now unregistered. Use !register again to register.'
        await client.send_message(message.channel, msg)


@client.event
async def onReady():
    print('Logged in as')
    print(client.user.name)
    print(client.user.id)
    print('------')

client.run(TOKEN)
